#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <time.h>
#include <sys/types.h>

volatile sig_atomic_t guessed = 0;
volatile sig_atomic_t guess = 0;

void handle_sigusr1(int sig) {
    guessed = 1; // Угадали
}

void handle_sigusr2(int sig) {
    guessed = -1; // Не угадали
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <N>\n", argv[0]);
        return EXIT_FAILURE;
    }

    int N = atoi(argv[1]);
    if (N <= 0) {
        fprintf(stderr, "N must be a positive integer.\n");
        return EXIT_FAILURE;
    }

    signal(SIGUSR1, handle_sigusr1);
    signal(SIGUSR2, handle_sigusr2);

    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        return EXIT_FAILURE;
    }

    int attempts = 0;
    srand(time(NULL));

    while (1) {
        if (pid > 0) { // Первый игрок
            int secret_number = rand() % N + 1; // Загадываем число
            printf("Первый игрок загадал число: %d\n", secret_number);
            kill(pid, SIGUSR1); // Уведомляем второго игрока

            while (1) {
                pause(); // Ждем сигнала от второго игрока
                if (guessed == 1) { // Угадали
                    printf("Второй игрок угадал число %d за %d попыток!\n", secret_number, attempts);
                    break;
                } else if (guessed == -1) { // Не угадали
                    printf("Второй игрок не угадал. Попробуйте снова.\n");
                    attempts++;
                    guess = rand() % N + 1; // Генерируем новое предположение
                    printf("Второй игрок предполагает: %d\n", guess);
                    if (guess == secret_number) {
                        kill(pid, SIGUSR1); // Угадали
                    } else {
                        kill(pid, SIGUSR2); // Не угадали
                    }
                }
            }
            attempts = 0; // Сбрасываем попытки для следующего раунда
        } else { // Второй игрок
            while (1) {
                pause(); // Ждем сигнала от первого игрока
                if (guessed == 0) { // Получили сигнал о начале игры
                    printf("Второй игрок начинает угадывать...\n");
                    guess = rand() % N + 1; // Первое предположение
                    printf("Второй игрок предполагает: %d\n", guess);
                    kill(getppid(), SIGUSR2); // Сообщаем первому игроку о предположении
                }
            }
        }

        guessed = 0; // Сбрасываем состояние для следующего раунда
    }

    return EXIT_SUCCESS;
}
